/*
Copyright 2001 by David Copeland

This file is part of Dave's Clone of Adventure.

Dave's Clone of Adventure is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

Dave's Clone of Adventure is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Dave's Clone of Adventure; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/
#include "Game4World.h"
#include "Game.h"

#include "Gate.h"
#include "Dragon.h"
#include "Bat.h"
#include "Key.h"
#include "Magnet.h"
#include "TransmolecularDot.h"

// saw a glowing key in "Indenture".  Not sure if it was the master, but it
// is in my version!
#define CREATE_MASTER_KEY(x,y,roomNumber) \
	if (isExtraExtraItems) \
	{\
		newImage = new GlowingScreenImage();\
		newImage->init(directDrawObject,its8BitReader,"key.bmp",&colorKey);\
		Key *key = new Key();\
		thisKey = key;\
		key->init(currentTime,newImage,x,y,SUPER_SECRET_CASTLE_COLOR);\
		itsImages->addElement(newImage);\
		itsObjects->addElement(key);\
		((Room*)(itsRooms->elementAt(roomNumber)))->addObject(key,(x == -1 ? TRUE : FALSE));\
	}

Game4World::Game4World(BOOL difficult, BOOL extraItems) : World(difficult,TRUE)
{
	isExtraExtraItems = extraItems;
	isMazeDark = difficult;
	itsDragonMouthOpenTime = difficult ? 300 : 700;
	itsNonRedDragonSpeed = Player::theMovementSpeed - (difficult ? 10 : 75);

	itsYellowKeyRoom = 18;
	itsYellowKeyX = -1;
	itsYellowKeyY = -1;

	itsWhiteKeyRoom = 14;
	itsWhiteKeyX = -1;
	itsWhiteKeyY = -1;

	itsBlackKeyRoom = 33;
	itsBlackKeyX = -1;
	itsBlackKeyY = -1;

	itsYellowDragonRoom = 32;
	itsYellowDragonX = 320;
	itsYellowDragonY = 192;

	itsGreenDragonRoom = 20;
	itsGreenDragonX = -1;
	itsGreenDragonY = -1;

	itsPurpleDragonRoom = 15;
	itsPurpleDragonX = 512;
	itsPurpleDragonY = 320;

	itsRedDragonRoom = 29;
	itsRedDragonX = -1;
	itsRedDragonY = -1;

	itsSwordRoom = 0;
	itsSwordX = 64;
	itsSwordY = 320;

	itsMagnetRoom = 22;
	itsMagnetX = -1;
	itsMagnetY = -1;

	itsBatRoom = itsSwordRoom;
	itsBatX = 48;
	itsBatY = 32;

	itsDotRoom = 30;
	itsDotX = -1;
	itsDotY = -1;

	itsBridgeRoom = 23;
	itsBridgeX = -1;
	itsBridgeY = -1;

	itsBridge2Room = 15;
	itsBridge2X = -1;
	itsBridge2Y = -1;

	itsChaliceRoom = 29;
	itsChaliceX = -1;
	itsChaliceY = -1;

	itsCandleX = -1;
	itsCandleY = -1;
	itsCandleRoom = 1;

	itsArmourX = -1;
	itsArmourY = -1;
	itsArmourRoom = 3;

}

// sets up the rooms and objects
BOOL Game4World::init(DWORD currentTime, LPDIRECTDRAW directDrawObject)
{
	itsGateImages = NULL;
	itsChaliceImages = NULL;
	itsBatImages = NULL;

	theEventDispatcher.registerForEvent(EventDispatcher::EVENT_TYPE_ENTER,this,GameObject::GAMEOBJECT_TYPE_PLAYER);
	INIT_WORLD();
	// room 0
    NEW_ROOM_EXTRA("YellowVestibule",bgImage,207,FALSE,FALSE,TRUE,64,320);

		int color=207;
		ADD_WALL(0,Game::theScreenHeight-32,256,32,color);
		ADD_WALL(384,Game::theScreenHeight-32,256,32,color);
		ADD_WALL(0,0,160,32,color);
		ADD_WALL(Game::theScreenWidth-160,0,160,32,color);
		ADD_WALL(0,0,32,Game::theScreenHeight,color);
		ADD_WALL(Game::theScreenWidth-32,0,32,Game::theScreenHeight,color);
		ADD_WALL(160,0,16,32,color);
		ADD_WALL(192,0,16,32,color);
		ADD_WALL(224,0,16,32,color);
		ADD_WALL(256,0,16,32,color);
		ADD_WALL(368,0,16,32,color);
		ADD_WALL(400,0,16,32,color);
		ADD_WALL(432,0,16,32,color);
		ADD_WALL(464,0,16,32,color);
		ADD_WALL(160,32,112,128,color);
		ADD_WALL(368,32,112,128,color);
		ADD_WALL(272,96,96,64,color);
		ADD_WALL(192,160,256,64,color);
		ADD_WALL(192,224,96,64,color);
		ADD_WALL(352,224,96,64,color);

		ADD_GATE(CASTLE_COLOR_GOLD,goldGate);

    END_NEW_ROOM(TRUE,FALSE);

	// room 1
	NEW_ROOM_EXTRA("Inside Yellow",bgImage,207,FALSE,FALSE,TRUE,64,64);

		// bottom walls
		ADD_WALL(0,Game::theScreenHeight-32,256,32,207);
		ADD_WALL(384,Game::theScreenHeight-32,256,32,207);

		// top walls
		ADD_WALL(0,0,256,32,207);
		ADD_WALL(384,0,256,32,207);

		// candle holder
		ADD_WALL(0,32,32,128,207);
		ADD_WALL(32,128,128,32,207);
		ADD_WALL(128,96,32,96,207);

		ADD_WALL(608,32,32,128,207);
		ADD_WALL(480,128,128,32,207);
		ADD_WALL(480,96,32,96,207);

	END_NEW_ROOM(FALSE,FALSE);

	// room 2
	NEW_ROOM_EXTRA("Sword Room",bgImage,207,FALSE,FALSE,TRUE,312,192);

		ADD_WALL(0,0,640,32,207);
		ADD_WALL(0,352,640,32,207);
		ADD_WALL(0,0,32,384,207);

		ADD_WALL(608,32,32,128,207);
		
		ADD_WALL(64,320,512,32,207);
		ADD_WALL(192,288,256,32,207);
		ADD_WALL(256,256,128,32,207);
		ADD_WALL(288,224,64,32,207);

	END_NEW_ROOM(FALSE,FALSE);

	// room 3
	NEW_ROOM_EXTRA("Armour Room",bgImage,207,FALSE,FALSE,TRUE,312,192);

		ADD_WALL(0,0,640,32,207);
		ADD_WALL(0,352,640,32,207);
		ADD_WALL(608,0,32,384,207);

		ADD_WALL(0,32,32,128,207);
		
		ADD_WALL(64,320,512,32,207);
		ADD_WALL(192,288,256,32,207);
		ADD_WALL(256,256,128,32,207);
		ADD_WALL(288,224,64,32,207);

	END_NEW_ROOM(FALSE,FALSE);

	// room 4
	NEW_ROOM_EXTRA("Chalice Room",bgImage,207,FALSE,FALSE,FALSE,64,64);

		ADD_WALL(0,Game::theScreenHeight-32,256,32,207);
		ADD_WALL(384,Game::theScreenHeight-32,256,32,207);

		ADD_WALL(0,0,32,384,207);
		ADD_WALL(608,0,32,384,207);

		ADD_WALL(0,0,640,32,207);

		ADD_WALL(272,96,96,32,207);
		ADD_WALL(272,128,32,32,207);
		ADD_WALL(336,128,32,32,207);

	END_NEW_ROOM(FALSE,TRUE);

	// room 5
	NEW_ROOM_EXTRA("Below Yellow",bgImage,32,FALSE,FALSE,TRUE,512,20);


		ADD_WALL(0,0,256,192,32);

		ADD_WALL(384,0,64,96,32);
		ADD_WALL(448,0,128,16,32);
		ADD_WALL(448,80,128,16,32);
		ADD_WALL(576,0,64,96,32);

		ADD_WALL(0,320,96,64,32);

		ADD_WALL(160,192,480,192,32);

	END_NEW_ROOM(FALSE,FALSE);

	// room 6
	NEW_ROOM_EXTRA("RightOfBelowYellow",bgImage,76,FALSE,FALSE,TRUE,320,192);


		ADD_WALL(0,0,640,96,76);

		ADD_WALL(0,192,32,192,76);

		ADD_WALL(608,352,32,32,76);

		ADD_CHANGING_WALL(592,0,8,384,0);


	END_NEW_ROOM(FALSE,FALSE);


	// room 7
	NEW_ROOM_EXTRA("AboveCatacombs",bgImage,114,FALSE,FALSE,TRUE,512,192);

		ADD_WALL(0,0,32,32,114);
		ADD_WALL(608,0,32,384,114);

		ADD_WALL(0,352,128,32,114);
		ADD_WALL(256,192,128,192,114);
		ADD_WALL(512,352,128,32,114);

	END_NEW_ROOM(FALSE,FALSE);

	// room 8
	NEW_ROOM_EXTRA("BeforeMaze",bgImage,200,FALSE,FALSE,TRUE,-1,-1);

		ADD_WALL(0,352,640,32,200);
		ADD_WALL(0,0,96,32,200);
		ADD_WALL(160,0,480,32,200);

		ADD_WALL(0,160,64,64,200);

	END_NEW_ROOM(FALSE,FALSE);

	// room 9
	NEW_ROOM_EXTRA("Maze1",bgImage,36,isMazeDark,TRUE,TRUE,448,96);

		ADD_WALL(0,352,640,32,36);
		ADD_WALL(0,256,32,64,36);
		ADD_WALL(64,256,64,64,36);
		ADD_WALL(160,256,128,64,36);
		ADD_WALL(320,256,256,64,36);

		ADD_WALL(0,160,640,64,36);

		ADD_WALL(0,0,64,96,36);
		ADD_WALL(128,0,64,160,36);
		ADD_WALL(192,64,128,32,36);
		ADD_WALL(256,0,64,64,36);

		ADD_WALL(384,0,128,32,36);
		ADD_WALL(384,32,32,128,36);
		ADD_WALL(480,32,32,128,36);

		ADD_WALL(576,0,64,32,36);
		
	END_NEW_ROOM(FALSE,FALSE);

	// room 10
	NEW_ROOM_EXTRA("Maze2",bgImage,36,isMazeDark,TRUE,TRUE,160,224);

		ADD_WALL(0,0,256,32,36);
		ADD_WALL(320,0,320,32,36);

		ADD_WALL(0,64,64,32,36);
		ADD_WALL(128,64,64,32,36);

		ADD_WALL(256,64,256,96,36);

		ADD_WALL(576,32,64,160,36);

		ADD_WALL(0,128,192,64,36);

		ADD_WALL(256,160,64,224,36);

		ADD_WALL(384,192,128,32,36);
		ADD_WALL(0,256,192,64,36);
		ADD_WALL(0,320,64,64,36);
		ADD_WALL(128,320,64,64,36);

		ADD_WALL(384,288,128,32,36);
		ADD_WALL(384,352,128,32,36);
		ADD_WALL(384,320,32,32,36);
		ADD_WALL(480,320,32,32,36);

		ADD_WALL(576,320,64,64,36);

	END_NEW_ROOM(FALSE,FALSE);

	// room 11
	NEW_ROOM_EXTRA("Maze3",bgImage,36,isMazeDark,TRUE,TRUE,320,32);

		ADD_WALL(0,0,32,384,36);
		ADD_WALL(64,0,64,320,36);

		ADD_WALL(0,352,256,32,36);
		ADD_WALL(384,352,256,32,36);

		ADD_WALL(128,192,64,64,36);

		ADD_WALL(192,0,32,96,36);
		ADD_WALL(416,0,32,96,36);
		ADD_WALL(224,64,192,32,36);

		ADD_WALL(192,160,64,160,36);

		ADD_WALL(288,160,64,128,36);

		ADD_WALL(384,160,32,160,36);
		ADD_WALL(384,160,128,32,36);

		ADD_WALL(512,0,64,256,36);

		ADD_WALL(608,0,32,96,36);

		ADD_WALL(608,160,32,64,36);

		ADD_WALL(448,256,32,64,36);

		ADD_WALL(512,256,128,64,36);

	END_NEW_ROOM(FALSE,FALSE);

	// room 12
	NEW_ROOM_EXTRA("Maze3",bgImage,36,isMazeDark,TRUE,TRUE,32,260);

		ADD_WALL(0,0,640,32,36);

		ADD_WALL(0,64,288,32,36);
		ADD_WALL(352,64,288,32,36);

		ADD_WALL(0,128,224,64,36);
		ADD_WALL(288,128,64,160,36);
		ADD_WALL(416,128,224,64,36);

		ADD_WALL(192,192,32,192,36);
		ADD_WALL(416,192,32,192,36);

		ADD_WALL(224,320,64,32,36);
		ADD_WALL(352,320,64,32,36);

		ADD_WALL(0,224,128,32,36);
		ADD_WALL(96,256,32,128,36);
		ADD_WALL(32,288,32,32,36);
		ADD_WALL(0,352,32,32,36);
		ADD_WALL(64,352,32,32,36);

		ADD_WALL(512,256,64,128,36);
		ADD_WALL(608,256,32,128,36);

	END_NEW_ROOM(FALSE,FALSE);

	// room 13
	NEW_ROOM_EXTRA("MazeEnd",bgImage,36,isMazeDark,TRUE,TRUE,64,64);

		ADD_WALL(0,0,32,384,36);
		ADD_WALL(0,0,256,32,36);
		ADD_WALL(384,0,256,32,36);

		ADD_WALL(160,32,96,160,36);
		ADD_WALL(384,32,32,32,36);
		ADD_WALL(384,64,256,32,36);

		ADD_WALL(128,128,512,64,36);
		ADD_WALL(32,160,32,192,36);

		ADD_WALL(32,352,224,32,36);
		ADD_WALL(320,352,320,32,36);

		ADD_WALL(576,224,64,32,36);
		ADD_WALL(576,256,32,96,36);
	END_NEW_ROOM(FALSE,FALSE);

	// room 14
	NEW_ROOM_EXTRA("BelowMaze",bgImage,129,FALSE,TRUE,TRUE,320,320);

		ADD_WALL(0,0,256,32,129);
		ADD_WALL(0,32,32,352,129);

		ADD_WALL(384,0,256,32,129);
		ADD_WALL(608,32,32,352,129);

		ADD_WALL(224,256,192,32,129);
		ADD_WALL(224,288,32,96,129);
		ADD_WALL(384,288,32,96,129);

	END_NEW_ROOM(FALSE,FALSE);

	// room 15
	NEW_ROOM_EXTRA("BelowBelowMaze",bgImage,129,FALSE,TRUE,TRUE,544,288);

		ADD_WALL(0,0,32,384,129);
		ADD_WALL(608,0,32,385,129);

		ADD_WALL(32,352,576,32,129);

		ADD_WALL(224,0,32,128,129);
		ADD_WALL(384,0,32,128,129);

	END_NEW_ROOM(FALSE,FALSE);

	// room 16
    NEW_ROOM_EXTRA("BlackVestibule",bgImage,0,FALSE,FALSE,FALSE,64,320);

		int color=0;
		ADD_WALL(0,Game::theScreenHeight-32,256,32,color);
		ADD_WALL(384,Game::theScreenHeight-32,256,32,color);
		ADD_WALL(0,0,160,32,color);
		ADD_WALL(Game::theScreenWidth-160,0,160,32,color);
		ADD_WALL(0,0,32,Game::theScreenHeight,color);
		ADD_WALL(Game::theScreenWidth-32,0,32,Game::theScreenHeight,color);
		ADD_WALL(160,0,16,32,color);
		ADD_WALL(192,0,16,32,color);
		ADD_WALL(224,0,16,32,color);
		ADD_WALL(256,0,16,32,color);
		ADD_WALL(368,0,16,32,color);
		ADD_WALL(400,0,16,32,color);
		ADD_WALL(432,0,16,32,color);
		ADD_WALL(464,0,16,32,color);
		ADD_WALL(160,32,112,128,color);
		ADD_WALL(368,32,112,128,color);
		ADD_WALL(272,96,96,64,color);
		ADD_WALL(192,160,256,64,color);
		ADD_WALL(192,224,96,64,color);
		ADD_WALL(352,224,96,64,color);

		ADD_GATE(CASTLE_COLOR_BLACK,blackGate);

    END_NEW_ROOM(FALSE,FALSE);

	// room 17
    NEW_ROOM_EXTRA("CatacombsEntrance",bgImage,0,TRUE,TRUE,TRUE,448,320);

		ADD_WALL(0,0,128,384,64);
		ADD_WALL(256,0,128,384,64);
		ADD_WALL(512,0,128,32,64);
		ADD_WALL(576,32,64,352,64);

		ADD_WALL(384,96,128,192,64);
		ADD_WALL(128,128,96,64,64);
		ADD_WALL(160,256,96,64,64);

	END_NEW_ROOM(FALSE,FALSE);

	// room 18
    NEW_ROOM_EXTRA("Catacombs1",bgImage,0,TRUE,TRUE,TRUE,128,288);

		ADD_WALL(0,0,128,384,64);
		ADD_WALL(256,0,128,384,64);
		ADD_WALL(160,160,64,224,64);
		ADD_WALL(128,352,32,32,64);
		ADD_WALL(416,160,64,224,64);

		ADD_WALL(576,0,64,32,64);

	END_NEW_ROOM(FALSE,FALSE);

	// room 19
    NEW_ROOM_EXTRA("Catacombs2",bgImage,0,TRUE,TRUE,TRUE,224,192);

		ADD_WALL(0,0,224,32,64);
		ADD_WALL(64,96,160,256,64);

		ADD_WALL(256,0,128,96,64);
		ADD_WALL(416,0,64,192,64);

		ADD_WALL(224,96,64,64,64);
		ADD_WALL(256,160,128,160,64);
		ADD_WALL(416,160,224,160,64);

		ADD_WALL(0,352,640,32,64);

	END_NEW_ROOM(FALSE,FALSE);

	// room 20
    NEW_ROOM_EXTRA("Catacombs3",bgImage,0,TRUE,TRUE,TRUE,320,192);

		ADD_WALL(0,0,640,32,64);
		ADD_WALL(608,32,32,352,64);

	END_NEW_ROOM(FALSE,FALSE);

	//room 21
    NEW_ROOM_EXTRA("Catacombs4",bgImage,0,TRUE,TRUE,TRUE,544,288);

		ADD_WALL(160,32,320,32,64);
		ADD_WALL(288,64,64,32,64);
		ADD_WALL(160,96,320,32,64);

		ADD_WALL(608,0,32,384,64);

		ADD_WALL(0,160,288,32,64);
		ADD_WALL(352,160,288,32,64);
		ADD_WALL(0,160,32,160,64);

		ADD_WALL(0,352,288,32,64);
		ADD_WALL(352,352,288,32,64);

		ADD_WALL(192,224,256,32,64);

		ADD_WALL(192,256,32,64,64);
		ADD_WALL(416,256,32,64,64);

		ADD_WALL(256,288,32,96,64);
		ADD_WALL(352,288,32,96,64);

	END_NEW_ROOM(FALSE,FALSE);

	//room 22
    NEW_ROOM_EXTRA("LeftOfCatacombs",bgImage,35,FALSE,FALSE,TRUE,35,320);

		ADD_WALL(0,0,256,32,35);
		ADD_WALL(384,0,256,32,35);

		ADD_WALL(0,352,640,32,35);

		ADD_CHANGING_WALL(40,0,8,384,0);

	END_NEW_ROOM(FALSE,FALSE);

	//room 23
    NEW_ROOM_EXTRA("BelowCatacombs",bgImage,7,FALSE,FALSE,TRUE,35,320);

		ADD_WALL(0,0,288,32,7);
		ADD_WALL(352,0,288,32,7);

		ADD_WALL(0,352,640,32,7);

		ADD_CHANGING_WALL(40,0,8,384,0);

	END_NEW_ROOM(FALSE,FALSE);

	//room 24
    NEW_ROOM_EXTRA("BelowWhiteCastle",bgImage,128,FALSE,FALSE,TRUE,35,320);

		ADD_WALL(0,0,256,32,128);
		ADD_WALL(384,0,256,32,128);

		ADD_WALL(0,352,640,32,128);

		ADD_CHANGING_WALL(592,0,8,384,0);

	END_NEW_ROOM(FALSE,FALSE);

	// room 25
    NEW_ROOM_EXTRA("WhiteVestibule",bgImage,246,FALSE,FALSE,TRUE,64,320);

		int color=246;
		ADD_WALL(0,Game::theScreenHeight-32,256,32,color);
		ADD_WALL(384,Game::theScreenHeight-32,256,32,color);
		ADD_WALL(0,0,160,32,color);
		ADD_WALL(Game::theScreenWidth-160,0,160,32,color);
		ADD_WALL(0,0,32,Game::theScreenHeight,color);
		ADD_WALL(Game::theScreenWidth-32,0,32,Game::theScreenHeight,color);
		ADD_WALL(160,0,16,32,color);
		ADD_WALL(192,0,16,32,color);
		ADD_WALL(224,0,16,32,color);
		ADD_WALL(256,0,16,32,color);
		ADD_WALL(368,0,16,32,color);
		ADD_WALL(400,0,16,32,color);
		ADD_WALL(432,0,16,32,color);
		ADD_WALL(464,0,16,32,color);
		ADD_WALL(160,32,112,128,color);
		ADD_WALL(368,32,112,128,color);
		ADD_WALL(272,96,96,64,color);
		ADD_WALL(192,160,256,64,color);
		ADD_WALL(192,224,96,64,color);
		ADD_WALL(352,224,96,64,color);

		ADD_GATE(CASTLE_COLOR_WHITE,whiteGate);

    END_NEW_ROOM(FALSE,FALSE);

	// room 26
    NEW_ROOM_EXTRA("BlueVestibule",bgImage,4,FALSE,FALSE,TRUE,64,320);

		int color=4;
		ADD_WALL(0,Game::theScreenHeight-32,256,32,color);
		ADD_WALL(384,Game::theScreenHeight-32,256,32,color);
		ADD_WALL(0,0,160,32,color);
		ADD_WALL(Game::theScreenWidth-160,0,160,32,color);
		ADD_WALL(0,0,32,Game::theScreenHeight,color);
		ADD_WALL(Game::theScreenWidth-32,0,32,Game::theScreenHeight,color);
		ADD_WALL(160,0,16,32,color);
		ADD_WALL(192,0,16,32,color);
		ADD_WALL(224,0,16,32,color);
		ADD_WALL(256,0,16,32,color);
		ADD_WALL(368,0,16,32,color);
		ADD_WALL(400,0,16,32,color);
		ADD_WALL(432,0,16,32,color);
		ADD_WALL(464,0,16,32,color);
		ADD_WALL(160,32,112,128,color);
		ADD_WALL(368,32,112,128,color);
		ADD_WALL(272,96,96,64,color);
		ADD_WALL(192,160,256,64,color);
		ADD_WALL(192,224,96,64,color);
		ADD_WALL(352,224,96,64,color);

		ADD_GATE(4,blueGate);

    END_NEW_ROOM(FALSE,FALSE);

	// room 27
    NEW_ROOM_EXTRA("InsideBlack",bgImage,0,FALSE,TRUE,TRUE,64,64);
		
		ADD_WALL(0,0,288,32,0);
		ADD_WALL(352,0,288,32,0);

		ADD_WALL(0,32,32,352,0);
		ADD_WALL(608,32,32,352,0);

		ADD_WALL(32,352,224,32,0);
		ADD_WALL(384,352,224,32,0);

		ADD_WALL(128,96,32,192,0);
		ADD_WALL(480,96,32,192,0);

		ADD_WALL(96,224,96,32,0);
		ADD_WALL(448,224,96,32,0);

    END_NEW_ROOM(FALSE,FALSE);

	// room 28
    NEW_ROOM_EXTRA("BlackMaze",bgImage,0,isMazeDark,FALSE,FALSE,64,320);

		ADD_WALL(0,0,288,32,0);
		ADD_WALL(352,0,288,64,0);

		ADD_WALL(0,32,32,128,0);
		ADD_WALL(64,32,32,128,0);
		ADD_WALL(96,32,96,32,0);
		ADD_WALL(192,32,32,96,0);
		ADD_WALL(256,32,32,96,0);

		ADD_WALL(384,64,64,64,0);
		ADD_WALL(544,64,96,64,0);

		ADD_WALL(128,96,32,160,0);
		ADD_WALL(160,96,32,96,0);
		ADD_WALL(256,96,96,32,0);
		ADD_WALL(480,96,32,64,0);

		ADD_WALL(320,128,32,32,0);
		ADD_WALL(608,128,32,32,0);

		ADD_WALL(224,160,64,64,0);
		ADD_WALL(320,160,192,32,0);
		ADD_WALL(544,160,32,160,0);

		ADD_WALL(64,192,32,96,0);

		ADD_WALL(0,224,32,160,0);
		ADD_WALL(160,224,32,32,0);
		ADD_WALL(224,224,320,32,0);
		ADD_WALL(608,224,32,160,0);

		ADD_WALL(512,256,32,96,0);

		ADD_WALL(64,288,416,32,0);

		ADD_WALL(32,352,256,32,0);
		ADD_WALL(352,352,256,32,0);
		
    END_NEW_ROOM(FALSE,FALSE);

	// room 29
    NEW_ROOM_EXTRA("BlackChamber",bgImage,0,FALSE,TRUE,TRUE,304,64);

		ADD_WALL(0,0,640,32,0);
		ADD_WALL(0,32,32,352,0);
		ADD_WALL(608,32,32,352,0);
		ADD_WALL(32,352,256,32,0);
		ADD_WALL(352,352,256,32,0);

		ADD_WALL(224,32,32,96,0);
		ADD_WALL(384,32,32,96,0);
		ADD_WALL(224,128,192,32,0);

	END_NEW_ROOM(FALSE,FALSE);

	// room 30
    NEW_ROOM_EXTRA("BlueChamber",bgImage,4,FALSE,TRUE,TRUE,320,64);

		ADD_WALL(0,0,640,32,4);

		ADD_WALL(0,32,32,128,4);
		ADD_WALL(608,32,32,128,4);

		ADD_WALL(0,224,32,160,4);
		ADD_WALL(608,224,32,160,4);

		ADD_WALL(32,352,224,32,4);
		ADD_WALL(384,352,224,32,4);

		ADD_WALL(256,160,128,64,4);
		
	END_NEW_ROOM(FALSE,FALSE);

	// room 31
    NEW_ROOM_EXTRA("InsideWhite",bgImage,246,FALSE,TRUE,TRUE,644,64);
		
		ADD_WALL(0,0,288,32,246);
		ADD_WALL(352,0,288,32,246);

		ADD_WALL(0,32,32,352,246);
		ADD_WALL(608,32,32,352,246);

		ADD_WALL(32,352,224,32,246);
		ADD_WALL(384,352,224,32,246);

		ADD_WALL(128,96,32,192,246);
		ADD_WALL(480,96,32,192,246);

		ADD_WALL(96,128,96,32,246);
		ADD_WALL(448,128,96,32,246);

    END_NEW_ROOM(FALSE,FALSE);

	// room 32
    NEW_ROOM_EXTRA("WhiteHall",bgImage,246,FALSE,FALSE,TRUE,64,320);

		ADD_WALL(0,0,288,384,246);
		ADD_WALL(352,0,288,384,246);

		ADD_WALL(288,64,16,256,246);
		ADD_WALL(336,64,16,256,246);

    END_NEW_ROOM(FALSE,FALSE);
		
	// room 33
    NEW_ROOM_EXTRA("WhiteChamber",bgImage,246,FALSE,TRUE,TRUE,96,288);

		ADD_WALL(0,0,640,32,246);
		ADD_WALL(0,32,32,352,246);
		ADD_WALL(608,32,32,352,246);
		ADD_WALL(32,352,256,32,246);
		ADD_WALL(352,352,256,32,246);

		ADD_WALL(32,224,224,32,246);
		ADD_WALL(256,224,32,128,246);

		ADD_WALL(384,224,224,32,246);
		ADD_WALL(352,224,32,128,246);

	END_NEW_ROOM(FALSE,FALSE);

	// room 34
    NEW_ROOM_EXTRA("SecretChamber",bgImage,130,FALSE,FALSE,FALSE,96,288);

		ADD_WALL(0,0,256,32,130);
		ADD_WALL(384,0,256,32,130);

		ADD_WALL(0,32,32,352,130);
		ADD_WALL(608,32,32,352,130);

	END_NEW_ROOM(FALSE,FALSE);

	// room 35
    NEW_ROOM_EXTRA("SecretChamber2",bgImage,240,FALSE,FALSE,FALSE,96,288);

		ADD_WALL(0,352,256,32,240);
		ADD_WALL(384,352,256,32,240);

		ADD_WALL(0,0,32,352,240);
		ADD_WALL(608,0,32,352,240);

	END_NEW_ROOM(FALSE,FALSE);

	//room 36
    NEW_ROOM_EXTRA("PathToSecretCastle",bgImage,240,FALSE,FALSE,FALSE,96,288);

		ADD_WALL(0,0,256,32,130);
		ADD_WALL(384,0,256,32,130);

		ADD_WALL(0,32,32,352,130);

		ADD_WALL(0,352,640,32,130);

	END_NEW_ROOM(FALSE,FALSE);

	Gate *greyGate = NULL;
	// room 37
    NEW_ROOM_EXTRA("SecretCastle",bgImage,247,FALSE,FALSE,FALSE,64,320);

		int color=247;
		ADD_WALL(0,Game::theScreenHeight-32,256,32,color);
		ADD_WALL(384,Game::theScreenHeight-32,256,32,color);
		ADD_WALL(0,0,160,32,color);
		ADD_WALL(Game::theScreenWidth-160,0,160,32,color);
		ADD_WALL(0,0,32,Game::theScreenHeight,color);
		ADD_WALL(Game::theScreenWidth-32,0,32,Game::theScreenHeight,color);
		ADD_WALL(160,0,16,32,color);
		ADD_WALL(192,0,16,32,color);
		ADD_WALL(224,0,16,32,color);
		ADD_WALL(256,0,16,32,color);
		ADD_WALL(368,0,16,32,color);
		ADD_WALL(400,0,16,32,color);
		ADD_WALL(432,0,16,32,color);
		ADD_WALL(464,0,16,32,color);
		ADD_WALL(160,32,112,128,color);
		ADD_WALL(368,32,112,128,color);
		ADD_WALL(272,96,96,64,color);
		ADD_WALL(192,160,256,64,color);
		ADD_WALL(192,224,96,64,color);
		ADD_WALL(352,224,96,64,color);

		ADD_GATE(247,greyGate);

    END_NEW_ROOM(FALSE,FALSE);

	// room 38
	NEW_ROOM_EXTRA("SecretMaze1",bgImage,214,FALSE,FALSE,FALSE,64,320);

		ADD_WALL(0,0,256,32,214);
		ADD_WALL(384,0,256,32,214);
		ADD_WALL(0,352,256,32,214);
		ADD_WALL(384,352,256,32,214);

		ADD_WALL(0,32,32,96,214);
		ADD_WALL(0,256,32,96,214);

		ADD_WALL(608,32,32,96,214);
		ADD_WALL(608,256,32,96,214);

	END_NEW_ROOM(FALSE,FALSE);

	// room 39
	NEW_ROOM_EXTRA("SecretMaze2",bgImage,214,FALSE,FALSE,FALSE,64,320);

		ADD_WALL(0,0,256,32,214);
		ADD_WALL(384,0,256,32,214);
		ADD_WALL(0,352,256,32,214);
		ADD_WALL(384,352,256,32,214);

		ADD_WALL(0,32,32,96,214);
		ADD_WALL(0,256,32,96,214);

		ADD_WALL(608,32,32,96,214);
		ADD_WALL(608,256,32,96,214);

	END_NEW_ROOM(FALSE,FALSE);

	// room 40
	NEW_ROOM_EXTRA("SecretMaze3",bgImage,214,FALSE,FALSE,FALSE,64,320);

		ADD_WALL(0,0,256,32,214);
		ADD_WALL(384,0,256,32,214);
		ADD_WALL(0,352,256,32,214);
		ADD_WALL(384,352,256,32,214);

		ADD_WALL(0,32,32,96,214);
		ADD_WALL(0,256,32,96,214);

		ADD_WALL(608,32,32,96,214);
		ADD_WALL(608,256,32,96,214);

	END_NEW_ROOM(FALSE,FALSE);

	// room 41
	NEW_ROOM_EXTRA("SecretMaze4",bgImage,214,FALSE,FALSE,FALSE,64,320);

		ADD_WALL(0,0,256,32,214);
		ADD_WALL(384,0,256,32,214);
		ADD_WALL(0,352,256,32,214);
		ADD_WALL(384,352,256,32,214);

		ADD_WALL(0,32,32,96,214);
		ADD_WALL(0,256,32,96,214);

		ADD_WALL(608,32,32,96,214);
		ADD_WALL(608,256,32,96,214);

	END_NEW_ROOM(FALSE,FALSE);

	// room 42
    NEW_ROOM_EXTRA("DeathRoom",bgImage,210,FALSE,FALSE,FALSE,96,288);

		ADD_WALL(0,0,640,32,210);
		ADD_WALL(0,32,32,352,210);
		ADD_WALL(608,32,32,352,210);
		ADD_WALL(32,352,256,32,210);
		ADD_WALL(352,352,256,32,210);

		ADD_WALL(32,224,224,32,210);
		ADD_WALL(256,224,32,128,210);

		ADD_WALL(384,224,224,32,210);
		ADD_WALL(352,224,32,128,210);

	END_NEW_ROOM(FALSE,FALSE);

	
	MAKE_ROOM_CONNECTION(0,5,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(0,0,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(0,0,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(0,8,RoomConnector::CONNECTION_LOCATION_TOP);
	MAKE_GATE_CONNECTION(0,1,goldGate);
	
	MAKE_ROOM_CONNECTION(1,2,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(1,3,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(1,4,RoomConnector::CONNECTION_LOCATION_TOP);
	MAKE_CASTLE_EXIT(1,0,goldGate);

	MAKE_ROOM_CONNECTION(2,2,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(2,3,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(2,1,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(2,2,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(3,3,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(3,1,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(3,2,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(3,3,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(4,1,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(4,4,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(4,4,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(4,1,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(5,8,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(5,10,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(5,6,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(5,0,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(6,7,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(6,5,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(6,6,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(6,7,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(7,17,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(7,8,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(7,7,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(7,6,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(8,6,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(8,9,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(8,7,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(8,5,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(9,10,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(9,11,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(9,8,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(9,10,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(10,9,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(10,12,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(10,5,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(10,13,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(11,14,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(11,7,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(11,9,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(11,12,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(12,11,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(12,13,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(12,10,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(12,11,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(13,10,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(13,7,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(13,12,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(13,16,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(14,15,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(14,17,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(14,22,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(14,11,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(15,6,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(15,17,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(15,22,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(15,14,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(16,13,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(16,16,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(16,16,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(16,8,RoomConnector::CONNECTION_LOCATION_TOP);
	MAKE_GATE_CONNECTION(16,27,blackGate);

	MAKE_ROOM_CONNECTION(17,18,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(17,17,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(17,17,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(17,7,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(18,19,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(18,24,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(18,20,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(18,17,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(19,34,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(19,22,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(19,21,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(19,18,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(20,21,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(20,18,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(20,15,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(20,9,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(21,23,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(21,19,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(21,22,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(21,20,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(22,0,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(22,36,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(22,19,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(22,26,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(23,26,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(23,24,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(23,24,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(23,21,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(24,25,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(24,23,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(24,23,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(24,25,RoomConnector::CONNECTION_LOCATION_TOP);
	
	MAKE_ROOM_CONNECTION(25,24,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(25,25,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(25,25,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(25,24,RoomConnector::CONNECTION_LOCATION_TOP);
	MAKE_GATE_CONNECTION(25,31,whiteGate);

	MAKE_ROOM_CONNECTION(26,22,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(26,26,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(26,26,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(26,14,RoomConnector::CONNECTION_LOCATION_TOP);
	MAKE_GATE_CONNECTION(26,30,blueGate);
	
	MAKE_ROOM_CONNECTION(27,27,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(27,27,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(27,28,RoomConnector::CONNECTION_LOCATION_TOP);
	MAKE_CASTLE_EXIT(27,16,blackGate);
	
	MAKE_ROOM_CONNECTION(28,27,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(28,30,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(28,28,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(28,29,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(29,28,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(29,29,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(29,29,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(29,27,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(30,28,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(30,30,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(30,30,RoomConnector::CONNECTION_LOCATION_TOP);
	MAKE_CASTLE_EXIT(30,26,blueGate);

	MAKE_ROOM_CONNECTION(31,31,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(31,31,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(31,32,RoomConnector::CONNECTION_LOCATION_TOP);
	MAKE_CASTLE_EXIT(31,25,whiteGate);

	MAKE_ROOM_CONNECTION(32,31,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(32,32,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(32,32,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(32,33,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(33,32,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(33,32,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(33,32,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(33,31,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(34,35,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(34,0,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(34,0,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(34,0,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(35,26,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(35,0,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(35,0,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(35,34,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(36,0,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(36,24,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(36,22,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(36,37,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(37,36,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(37,37,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(37,37,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(37,37,RoomConnector::CONNECTION_LOCATION_TOP);
	MAKE_GATE_CONNECTION(37,38,greyGate);

	MAKE_ROOM_CONNECTION(38,39,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(38,38,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(38,41,RoomConnector::CONNECTION_LOCATION_TOP);
	MAKE_CASTLE_EXIT(38,37,greyGate);

	MAKE_ROOM_CONNECTION(39,40,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(39,39,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(39,40,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(39,39,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(40,40,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(40,38,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(40,41,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(40,42,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(41,38,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(41,39,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(41,41,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(41,41,RoomConnector::CONNECTION_LOCATION_TOP);

	MAKE_ROOM_CONNECTION(42,7,RoomConnector::CONNECTION_LOCATION_BOTTOM);
	MAKE_ROOM_CONNECTION(42,42,RoomConnector::CONNECTION_LOCATION_LEFT);
	MAKE_ROOM_CONNECTION(42,42,RoomConnector::CONNECTION_LOCATION_RIGHT);
	MAKE_ROOM_CONNECTION(42,42,RoomConnector::CONNECTION_LOCATION_TOP);

	itsPlayerStartX = 312;
	itsPlayerStartY = Game::theScreenHeight - 64;

	setObjectsPositionsAndRooms();

	CREATE_PLAYER();

	CREATE_DOT(33,33,30);
	CREATE_MAGNET(itsMagnetX,itsMagnetY,itsMagnetRoom);
	CREATE_BRIDGE(itsBridgeX,itsBridgeY,itsBridgeRoom);
	CREATE_BRIDGE(itsBridge2X,itsBridge2Y,itsBridge2Room);
	CREATE_CHALICE(itsChaliceX,itsChaliceY,itsChaliceRoom);
	CREATE_SWORD(itsSwordX,itsSwordY,itsSwordRoom);

	CREATE_KEY(CASTLE_COLOR_GOLD,itsYellowKeyX,itsYellowKeyY,itsYellowKeyRoom);
	CREATE_DRAGON(itsYellowDragonX,itsYellowDragonY,DRAGON_COLOR_YELLOW,itsYellowDragonRoom,thisKey,sword,0,itsNonRedDragonSpeed,itsDragonMouthOpenTime);
	CREATE_KEY(CASTLE_COLOR_BLACK,itsBlackKeyX,itsBlackKeyY,itsBlackKeyRoom);
	CREATE_DRAGON(itsGreenDragonX,itsGreenDragonY,DRAGON_COLOR_GREEN,itsGreenDragonRoom,thisKey,NULL,0,itsNonRedDragonSpeed,itsDragonMouthOpenTime);
	
	CREATE_KEY(CASTLE_COLOR_WHITE,itsWhiteKeyX,itsWhiteKeyY,itsWhiteKeyRoom);
	CREATE_DRAGON(itsPurpleDragonX,itsPurpleDragonY,38,itsPurpleDragonRoom,thisKey,NULL,0,Player::theMovementSpeed + 10,itsDragonMouthOpenTime + (isDifficult ? -100 : 100));

	CREATE_DRAGON(itsRedDragonX,itsRedDragonY,DRAGON_COLOR_RED,itsRedDragonRoom,chalice,NULL,0,Player::theMovementSpeed,itsDragonMouthOpenTime);
	
	CREATE_CANDLE(itsCandleX,itsCandleY,itsCandleRoom);
	CREATE_ARMOUR(itsArmourX,itsArmourY,itsArmourRoom);
	CREATE_BAT(itsBatX,itsBatY,itsBatRoom);

	CREATE_EASTEREGG(156,142,34,"davetron",itsDavetronImages);
	CREATE_MASTER_KEY(64,320,35);

	assert(chalice != NULL);
	assert(sword != NULL);


	return TRUE;
}

void Game4World::onEnterRoom(GameObject *object, Room *room)
{
	if (object == itsPlayer)
	{
		if (0 == strcmp(room->getName(),"DeathRoom"))
		{
			int deaddragons = 0;
			// OK, here we go
			for (UINT i=0;i<itsObjects->length();i++)
			{
				GameObject *object = (GameObject *)(itsObjects->elementAt(i));
				if (object->getType() == GameObject::GAMEOBJECT_TYPE_DRAGON)
				{
					// kill it
					Dragon *dragon = (Dragon *)object;
					dragon->getRoom()->removeObject(dragon);
					itsPlayer->getRoom()->addObject(dragon);
					dragon->setX((deaddragons < 2 ? 64 : 374) + (deaddragons * 64));
					dragon->setY(278);
					dragon->kill(timeGetTime());
					deaddragons++;
				}
				else if (object->getType() == GameObject::GAMEOBJECT_TYPE_BAT)
				{
					Bat *bat = (Bat *)object;
					bat->getRoom()->removeObject(bat);
					itsPlayer->getRoom()->addObject(bat);
					bat->setX(64);
					bat->setY(64);
					bat->stun();
				}
				else if (object->getType() == GameObject::GAMEOBJECT_TYPE_CHALICE)
				{
					object->getRoom()->removeObject(object);
					itsPlayer->getRoom()->addObject(object);
					object->setX(320);
					object->setY(40);
				}
			}
			theEventDispatcher.fireEvent(EventDispatcher::MAX_EVENT_TYPES,NULL,NULL);
		}
	}
}

// release resources
void Game4World::release()
{
}